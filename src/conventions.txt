@CONVENTION: for the word we will use to describe the different kinds
of ''construction'' we can have:
*make        return object in stack
*new         return heap pointer
*build       caller passes mem address to construct over

// Why dont I want to use the std?
// *it takes a *really* long time to compile
// *it makes me lazy and I dont worry about where things live in memory. I say that
// *because last time I just used a bunch of std::strings and vectors all over the
//  place and I called malloc a lot more than I needed to
// *I (mostly) don't like destructors and constructors anymore, they might make 
//  unnecessary copies and mallocs all over the place, which presents a ton of
//  traps for 'young players'

@CONVETION: convention for writting TaggedEnums

enum TaggedEnumKind { 
    Name1Kind,
    Name2Kind,
    Name3Kind,
    ...
};

struct Name1Form
{
	...
};

struct Name2Form
{
	...
};

struct Name3Form
{
	...
};

...

struct TaggedEnumKind
{
    RustEnumKind kind;
    union{
        Name1Form name1Form;
        Name2Form name2Form;
        Name3Form name3Form;
        ...
    };
    ...
};
