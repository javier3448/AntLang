@TODO SOON:
Write the maximum length of a string representation of QbeOperand in a constant 
BE MINDFUL OF THE MAX LENGTH OF QBE CONSTANTS TOO

@TODO: Storing the location of things is a bad idea, it forces you to carry around unnecessary tokens,
which are actually quite heavy.
So we need a better doing that, maybe a struct location? that all nodes have, no idea :((((

@TODO quality of life of parse:
first, first dont use the weird function: 'getLeftChildOrOnlyChild' and type to simplify the braching in a different way
'construct' the astNodes in a different way, I dont like the .make something They are all heap allocated anyway why not allocated them in the 'make' function and
return the pointer instead. (I dont know if this sabotages my intentions of trying to use 'custom allocators'
later, for know I will assume it doesnt) 

@TODO LATER:
Implement a better type system, one that can infer types from templates or generics
or whatever. Useful resources when we get there:
*Wand Algorithm
*https://en.wikipedia.org/wiki/Hindley%E2%80%93Milner_type_system#Algorithm_W
*Algorithm W
*[!] paper about local type inferance
        https://www.cis.upenn.edu/~bcpierce/papers/lti-toplas.pdf
*A microsoft patent that seems interesting but I dont really understand what it is
		https://patents.google.com/patent/US7086041B2/en

@TODO EVENTUALLY:
Time the performance just to get a rough idea of how things are going later on 
we will use all them fancy tools to profile but for now a simple timer is fine

@ We need a more consistent way of 'constructing' structs, maybe just a function 
that takes a pointer to the struct to be constructed, the same a method but I think it 
looks a bit better, IDK

@SERIOUS TODO:
Find a much much better way of reporting errors.
For now we just cout something and then assert(false)

@TODO LATER LEXER: //Big quality of life changes!
refactor the lexer, try to make less of a literal 'state machine' and something
more readable even if the flow of it is not as efficient as it would be if it 
were a state machine
Maybe we should allow peeking by string not by char
Use `peekChar` instead of lexBuffer[lexPointer]
Maybe add a function that returns the next n chars in string or some error code
if there arent enough chars left in the hllSource
[!]Maybe check for all symbols, keywords, punctuation and operators separately 
and leave the lexer for stuff that is not a symbol or a keyword. 
:think: There are sequences of chars that can only appear in a specific token, for 
example: 'case' can appear inside the identifier: 'casey' but '<=' cant appear 
anywhere else, *maybe* we can take advantage of that

@TODO:
write a macro that asserts something and prints a message when the assertion fails.
this would be a good excercise to learn a more about c macros

@TODO:
Use templates or whatnot to make a malloc that is easier to use, so I dont have to
write the type like 3 times everytime I use malloc

@TODO: make a better way of error handling, honestly we need to put some
serious thought into how we are going to comunicate errors, we can't just
stop compiling after we find the first error. But maybe we cant construct
a good error message as soon as we know there is an error, we might have
to go back in the call tree to make a better error

@Improvement?????:
Abbreviate Expression to expr through out all the 'codebase'

@TODO:
Make a templated version of dynamic array that has no constructor or destructor.
It doesnt have to be great or let the user define allocators or resizing 
parameters. I just want to be able to progress and see what works and what doesnt
before having to think about a proper 'allocation strategy'

@TODO: 
Get rid of all constructors, just use functions from now on:
MyObj construct(construct params...);
or
void construct(MyObj* obj, construct params...);

@TODO much much much later on:
Decide which asserts are worth keeping in release build (most of them seem
quite cheap so I wouldn't mind the perf hit) We might have to write our own
assert macro if we want to do that

@TODO quality of life improvement: the readability of the double literals in 
the our current qbe ir generation is way too bad, find way to improve it

ðŸ¤”
A lot of the problems we are having with strings is that we want 1 struct to 
perfectly work with everything we do. There is no need for that. We can have
some strings be null terminated, others have length s64 or even s32

[!]
ðŸ¤”
If the identifier fo a temporal can only has a staticaly know max length
why couldn't we store the name in the struct instead of having a MyString that
has a heap pointer

@TODO: Should we have a guy that goes thru the AST and generates both LLVM and 
Qbe at the same time?
For now just generate qbe