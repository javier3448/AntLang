// This is just a file where I put code that might be useful later on 
// but its kinda getting in the way 

// @TODO: put this in a different file, we wont be using right now but it might
// be useful later
int simpleLexerTester()
{
    //restart:
    Lexer::init("../../src/TestFiles/new_parser_stuff_for_playing_around_with_typechecking.test");

    cout << "=======LEXING=======" << endl;

    //@REMEMBER: right now we are leaking the myString of every single token
    //this whole function is just to qd test the lexer
    auto token = Lexer::getNextToken();

    while(true){
        switch (token.kind) {
            case Identifier:
            {
                cout << "Identifier: " << token.string << endl;
            }break;
            case Number:
            {
                cout << "Number: " << token.string << endl;
            }break;
            case Error:
            {
                cout << "Error: " << token.string << endl;
            }break;
            case Plus:
            {
                cout << "Plus: +" << endl;
            }break;
            case Minus:
            {
                cout << "Minus: -" << endl;
            }break;
            case Eof:
            {
                cout << "Eof: EOF"  << endl;
                goto break_while;
            }break;
            case LeftParen:
            {
                cout << "("  << endl;
            }break;
            case RightParen:
            {
                cout << ")"  << endl;
            }break;
            case Division:
            {
                cout << "/"  << endl;
            }break;
            case Multiplication:
            {
                cout << "*"  << endl;
            }break;
            case Key_u64:
            {
                cout << "u64" << endl;
            }break;
            case Key_s64:
            {
                cout << "s64" << endl;
            }break;
            case Key_u32:
            {
                cout << "u32" << endl;
            }break;
            case Key_s32:
            {
                cout << "s32" << endl;
            }break;
            case Key_u16:
            {
                cout << "u16" << endl;
            }break;
            case Key_s16:
            {
                cout << "s16" << endl;
            }break;
            case Key_u8:
            {
                cout << "u8:" << endl;
            }break;
            case Key_s8:
            {
                cout << "s8:" << endl;
            }break;
            case Key_float32:
            {
                cout << "float32" << endl;
            }break;
            case Key_float64:
            {
                cout << "float64" << endl;
            }break;
            case Key_cast:
            {
                cout << "cast" << endl;
            }break;
            case Less:
            {
                cout << "<" << endl;
            }break;
            case Greater:
            {
                cout << ">" << endl;
            }break;
            default:
                assert(false);
        }
        token = Lexer::getNextToken();
    }
    break_while:

    //@bodge as fuck just for qd testing:
    // std::cin.get();
    // goto restart;

    return 0;
}

// TODO: do like a toString method for tokens to avoid all this mess
int lexerTester()
{
    restart:
    auto result = Lexer::init("../../src/TestFiles/test.txt");
    if(result.has_value()){
        cout << result.value() << endl;
        exit(1);
    }

    cout << "=======LEXING=======" << endl;

    Lexer::peekToken(15);
    //@REMEMBER: right now we are leaking the myString of every single token
    //this whole contraption is just to qd test the lexer
    auto token = Lexer::getNextToken();

    //@debug
    s64 counter = 0;
    while(true){
        counter++;
        if(counter == 32){
            Lexer::peekToken(15);
            counter = 0;
        }
        switch (token.kind) {
            case Identifier:
            {
                cout << "Identifier: " << token.string << endl;
            }break;
            case Integer:
            {
                cout << "integer: " << token.integer << endl;
            }break;
            case Real:
            {
                cout << "Real: " << token.string << endl;
            }break;
            case Error:
            {
                cout << "Error: " << token.string << endl;
            }break;
            case Plus:
            {
                cout << "Plus: +" << endl;
            }break;
            case Minus:
            {
                cout << "Minus: -" << endl;
            }break;
            case Eof:
            {
                cout << "Eof: EOF"  << endl;
                goto break_while;
            }break;
            case LeftParen:
            {
                cout << "("  << endl;
            }break;
            case RightParen:
            {
                cout << ")"  << endl;
            }break;
            case Division:
            {
                cout << "/"  << endl;
            }break;
            case Multiplication:
            {
                cout << "*"  << endl;
            }break;
            default:
                assert(false);
        }
        token = Lexer::getNextToken();
    }
    break_while:

    //@bodge as fuck just for qd testing:
    std::cin.get();
    goto restart;

    return 0;
}

//@TODO: poner esto en un mejor lugar. Me da cosa borrarlo porque talvez nos
//sirva pero por ahora definitivamente no lo vamos a usar
int parserTester()
{
    Lexer::init("../../src/TestFiles/new_number_lits.test");

    auto expr = Parser::parseExpression();

    auto graphvizCode = "digraph G {\n" +  Grapher::graphExpression(expr).code  + "\n}\n";


    //@DEBUG: just to generate save and compile a .dot file
    std::FILE* f = std::fopen("../../src/TestFiles/Graphviz/test.dot", "wb");

    if(f == nullptr){
        cout << "Couldnt generate the test graphviz image: n";
        cout << strerror(errno) << endl;
        exit(1);
    }
    //@TODO: report error if something goes wrong
    fprintf(f, "%s", graphvizCode.c_str());
    fclose(f);

    auto compileDot = "dot -Tpng "
                      "../../src/TestFiles/Graphviz/test.dot "
                      "-o "
                      "../../src/TestFiles/Graphviz/test.png";
    auto displayImage = "nohup display ../../src/TestFiles/Graphviz/test.png &";

    system(compileDot);
    // TODO: change it so it doesnt wait for image display window to close to
    // continue this main
    system(displayImage);

    return 0;
}

// Qbe tester as of 18/01:
int testQbe()
{
    cout << "Hello there" << endl;

    auto result = Lexer::init("../../src/TestFiles/test.txt");
    if(result.has_value()){
        cout << result.value() << endl;
        exit(1);
    }

    auto expr = Parser::parseExpression();

    AntQbeGen::init();
    AntQbeGen::compileTopLevelExpression(expr);

    //@debug
    cout << qbeBuffer.buffer << endl;

    //TODO: print the qbe instructions

    return 0;
}
